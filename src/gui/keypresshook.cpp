#include "keypresshook.h"
#include <QKeyEvent>
#include <QDebug>

KeyPressHook::KeyPressHook(QObject *parent) :
    QObject(parent),
    grabKeyboard(false)
{
}

bool KeyPressHook::eventFilter(QObject *obj, QEvent *event)
{
    if (grabKeyboard && event->type() == QEvent::KeyPress ) {
        // Capturing keyboard. Get keys that are used by virtual keyboard and send to virtual keyboard
        QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);
        // Use keyEvent->text() to get the unicode simbol generated by the keyevent (ie 'A' or 'a', etc)
        switch (keyEvent->key()) {

        case Qt::Key_Space:
        case Qt::Key_Apostrophe:
        case Qt::Key_Comma:
        case Qt::Key_Minus:
        case Qt::Key_Period:
        case Qt::Key_Slash:
        case Qt::Key_0:
        case Qt::Key_1:
        case Qt::Key_2:
        case Qt::Key_3:
        case Qt::Key_4:
        case Qt::Key_5:
        case Qt::Key_6:
        case Qt::Key_7:
        case Qt::Key_8:
        case Qt::Key_9:
        case Qt::Key_Semicolon:
        case Qt::Key_Equal:
        case Qt::Key_A:
        case Qt::Key_B:
        case Qt::Key_C:
        case Qt::Key_D:
        case Qt::Key_E:
        case Qt::Key_F:
        case Qt::Key_G:
        case Qt::Key_H:
        case Qt::Key_I:
        case Qt::Key_J:
        case Qt::Key_K:
        case Qt::Key_L:
        case Qt::Key_M:
        case Qt::Key_N:
        case Qt::Key_O:
        case Qt::Key_P:
        case Qt::Key_Q:
        case Qt::Key_R:
        case Qt::Key_S:
        case Qt::Key_T:
        case Qt::Key_U:
        case Qt::Key_V:
        case Qt::Key_W:
        case Qt::Key_X:
        case Qt::Key_Y:
        case Qt::Key_Z:
        case Qt::Key_BracketLeft:
        case Qt::Key_Backslash:
        case Qt::Key_BracketRight:
        case Qt::Key_Agrave: // Grave Acent
        //  GLFW_KEY_WORLD_1 & 2  maps to ??
        case Qt::Key_Escape:
        case Qt::Key_Enter:
        case Qt::Key_Tab:
        case Qt::Key_Backspace:
        case Qt::Key_Insert:
        case Qt::Key_Delete:
        case Qt::Key_Right:
        case Qt::Key_Left:
        case Qt::Key_Down:
        case Qt::Key_Up:
        case Qt::Key_Shift:
        case Qt::Key_Control:
        case Qt::Key_Alt:

            // TODO
            break;

            // Unknow keys or not capture keys
        case 0:
        case Qt::Key_unknown:
        default:
            return QObject::eventFilter(obj, event);
        }

    } else {
        // Standard event procesing
        return QObject::eventFilter(obj, event);
    }
}
